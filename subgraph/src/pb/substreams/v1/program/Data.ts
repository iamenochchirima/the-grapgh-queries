// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { CreateEvent } from "./CreateEvent";
import { TradeEvent } from "./TradeEvent";
import { CompleteEvent } from "./CompleteEvent";
import { SetParamsEvent } from "./SetParamsEvent";
import { SetParams } from "./SetParams";
import { Create } from "./Create";
import { Buy } from "./Buy";
import { Sell } from "./Sell";

export class Data {
  static encode(message: Data, writer: Writer): void {
    const createEventList = message.createEventList;
    for (let i: i32 = 0; i < createEventList.length; ++i) {
      writer.uint32(10);
      writer.fork();
      CreateEvent.encode(createEventList[i], writer);
      writer.ldelim();
    }

    const tradeEventList = message.tradeEventList;
    for (let i: i32 = 0; i < tradeEventList.length; ++i) {
      writer.uint32(18);
      writer.fork();
      TradeEvent.encode(tradeEventList[i], writer);
      writer.ldelim();
    }

    const completeEventList = message.completeEventList;
    for (let i: i32 = 0; i < completeEventList.length; ++i) {
      writer.uint32(26);
      writer.fork();
      CompleteEvent.encode(completeEventList[i], writer);
      writer.ldelim();
    }

    const setParamsEventList = message.setParamsEventList;
    for (let i: i32 = 0; i < setParamsEventList.length; ++i) {
      writer.uint32(34);
      writer.fork();
      SetParamsEvent.encode(setParamsEventList[i], writer);
      writer.ldelim();
    }

    const setParamsList = message.setParamsList;
    for (let i: i32 = 0; i < setParamsList.length; ++i) {
      writer.uint32(42);
      writer.fork();
      SetParams.encode(setParamsList[i], writer);
      writer.ldelim();
    }

    const createList = message.createList;
    for (let i: i32 = 0; i < createList.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Create.encode(createList[i], writer);
      writer.ldelim();
    }

    const buyList = message.buyList;
    for (let i: i32 = 0; i < buyList.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Buy.encode(buyList[i], writer);
      writer.ldelim();
    }

    const sellList = message.sellList;
    for (let i: i32 = 0; i < sellList.length; ++i) {
      writer.uint32(66);
      writer.fork();
      Sell.encode(sellList[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Data {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Data();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.createEventList.push(
            CreateEvent.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.tradeEventList.push(
            TradeEvent.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.completeEventList.push(
            CompleteEvent.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.setParamsEventList.push(
            SetParamsEvent.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.setParamsList.push(SetParams.decode(reader, reader.uint32()));
          break;

        case 6:
          message.createList.push(Create.decode(reader, reader.uint32()));
          break;

        case 7:
          message.buyList.push(Buy.decode(reader, reader.uint32()));
          break;

        case 8:
          message.sellList.push(Sell.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  createEventList: Array<CreateEvent>;
  tradeEventList: Array<TradeEvent>;
  completeEventList: Array<CompleteEvent>;
  setParamsEventList: Array<SetParamsEvent>;
  setParamsList: Array<SetParams>;
  createList: Array<Create>;
  buyList: Array<Buy>;
  sellList: Array<Sell>;

  constructor(
    createEventList: Array<CreateEvent> = [],
    tradeEventList: Array<TradeEvent> = [],
    completeEventList: Array<CompleteEvent> = [],
    setParamsEventList: Array<SetParamsEvent> = [],
    setParamsList: Array<SetParams> = [],
    createList: Array<Create> = [],
    buyList: Array<Buy> = [],
    sellList: Array<Sell> = []
  ) {
    this.createEventList = createEventList;
    this.tradeEventList = tradeEventList;
    this.completeEventList = completeEventList;
    this.setParamsEventList = setParamsEventList;
    this.setParamsList = setParamsList;
    this.createList = createList;
    this.buyList = buyList;
    this.sellList = sellList;
  }
}
