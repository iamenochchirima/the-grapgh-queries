// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class SetParamsEvent {
  static encode(message: SetParamsEvent, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.feeRecipient);

    writer.uint32(16);
    writer.uint64(message.initialVirtualTokenReserves);

    writer.uint32(24);
    writer.uint64(message.initialVirtualSolReserves);

    writer.uint32(32);
    writer.uint64(message.initialRealTokenReserves);

    writer.uint32(40);
    writer.uint64(message.tokenTotalSupply);

    writer.uint32(48);
    writer.uint64(message.feeBasisPoints);
  }

  static decode(reader: Reader, length: i32): SetParamsEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SetParamsEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feeRecipient = reader.string();
          break;

        case 2:
          message.initialVirtualTokenReserves = reader.uint64();
          break;

        case 3:
          message.initialVirtualSolReserves = reader.uint64();
          break;

        case 4:
          message.initialRealTokenReserves = reader.uint64();
          break;

        case 5:
          message.tokenTotalSupply = reader.uint64();
          break;

        case 6:
          message.feeBasisPoints = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  feeRecipient: string;
  initialVirtualTokenReserves: u64;
  initialVirtualSolReserves: u64;
  initialRealTokenReserves: u64;
  tokenTotalSupply: u64;
  feeBasisPoints: u64;

  constructor(
    feeRecipient: string = "",
    initialVirtualTokenReserves: u64 = 0,
    initialVirtualSolReserves: u64 = 0,
    initialRealTokenReserves: u64 = 0,
    tokenTotalSupply: u64 = 0,
    feeBasisPoints: u64 = 0
  ) {
    this.feeRecipient = feeRecipient;
    this.initialVirtualTokenReserves = initialVirtualTokenReserves;
    this.initialVirtualSolReserves = initialVirtualSolReserves;
    this.initialRealTokenReserves = initialRealTokenReserves;
    this.tokenTotalSupply = tokenTotalSupply;
    this.feeBasisPoints = feeBasisPoints;
  }
}
