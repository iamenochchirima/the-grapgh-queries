// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class TradeEvent {
  static encode(message: TradeEvent, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.mint);

    writer.uint32(16);
    writer.uint64(message.solAmount);

    writer.uint32(24);
    writer.uint64(message.tokenAmount);

    writer.uint32(32);
    writer.bool(message.isBuy);

    writer.uint32(42);
    writer.string(message.user);

    writer.uint32(48);
    writer.int64(message.timestamp);

    writer.uint32(56);
    writer.uint64(message.virtualSolReserves);

    writer.uint32(64);
    writer.uint64(message.virtualTokenReserves);

    writer.uint32(72);
    writer.uint64(message.realSolReserves);

    writer.uint32(80);
    writer.uint64(message.realTokenReserves);
  }

  static decode(reader: Reader, length: i32): TradeEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TradeEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.mint = reader.string();
          break;

        case 2:
          message.solAmount = reader.uint64();
          break;

        case 3:
          message.tokenAmount = reader.uint64();
          break;

        case 4:
          message.isBuy = reader.bool();
          break;

        case 5:
          message.user = reader.string();
          break;

        case 6:
          message.timestamp = reader.int64();
          break;

        case 7:
          message.virtualSolReserves = reader.uint64();
          break;

        case 8:
          message.virtualTokenReserves = reader.uint64();
          break;

        case 9:
          message.realSolReserves = reader.uint64();
          break;

        case 10:
          message.realTokenReserves = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  mint: string;
  solAmount: u64;
  tokenAmount: u64;
  isBuy: bool;
  user: string;
  timestamp: i64;
  virtualSolReserves: u64;
  virtualTokenReserves: u64;
  realSolReserves: u64;
  realTokenReserves: u64;

  constructor(
    mint: string = "",
    solAmount: u64 = 0,
    tokenAmount: u64 = 0,
    isBuy: bool = false,
    user: string = "",
    timestamp: i64 = 0,
    virtualSolReserves: u64 = 0,
    virtualTokenReserves: u64 = 0,
    realSolReserves: u64 = 0,
    realTokenReserves: u64 = 0
  ) {
    this.mint = mint;
    this.solAmount = solAmount;
    this.tokenAmount = tokenAmount;
    this.isBuy = isBuy;
    this.user = user;
    this.timestamp = timestamp;
    this.virtualSolReserves = virtualSolReserves;
    this.virtualTokenReserves = virtualTokenReserves;
    this.realSolReserves = realSolReserves;
    this.realTokenReserves = realTokenReserves;
  }
}
